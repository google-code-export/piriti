#summary Mapping JSON to POJOs

= Introduction =

JSON mapping is done using the [http://piriti.googlecode.com/svn/site/apidocs/name/pehl/piriti/client/json/Json.html @JsonField] annotation. This annotation has the following attributes:
  * order: TODO
  * property: The name of the field / property. Only necessary for [Features#External_Mappings external mappings].
  * value: The key / JSONPath of the JSON data. Defaults to "" which means that the fields name is taken as a default.
  * format: The format to use when converting the JSON data to the fields type. Defaults to "".
  * converter: TODO
  * getter: TODO 
  * setter: TODO  

= Mapping =
The @Json annotation is specified for every field you want to map / serialize. The JSON data is selected by a "path" expression. In the simplest case the path is just the key of the JSON data. For more complex cases, you can also use a [http://code.google.com/p/jsonpath/ JSONPath expression]. If necessary, the selected data is converted to the type of the annotated property. For some types you can specify a format and a custom converter which is used to parse / serialize the JSON data to / from the properties type.

The annotation must be placed on a field in the POJO or must be part of the @JsonMappings annotation. When placed on a field and the field is not accessible, Piriti tries to use setters / getters instead.
If no path is given, the fields name is taken as a default. For some types you can specify a format and converter which is used when converting the JSON data to the fields type:
<table cellpadding="3" cellspacing="0" border="1">
<tr>
<th align="left">Type</th>
<th>Default path expression</th>
<th>Format options</th>
<th>Converter options</th>
</tr>
<tr>
<td>boolean, Boolean</td>
<td>`<fieldname>`</td>
<td>Must be a JSON boolean. No format supported. If specified it is ignored.</td>
<td>No custom converter supported. If specified it is ignored.</td>
</tr>
<tr>
<td>byte, Byte</td>
<td>`<fieldname>`</td>
<td>Must be a JSON number. No format supported. If specified it is ignored.</td>
<td>No custom converter supported. If specified it is ignored.</td>
</tr>
<tr>
<td>char, Character</td>
<td>`<fieldname>`</td>
<td>Must be a JSON string. No format supported. If specified it is ignored.</td>
<td>No custom converter supported. If specified it is ignored.</td>
</tr>
<tr>
<td>java.util.Date</td>
<td>`<fieldname>`</td>
<td>Must be a JSON string. If no format is specified a [http://piriti.googlecode.com/svn/site/apidocs/constant-values.html#name.pehl.gwt.piriti.client.converter.DateConverter.DEFAULT_FORMAT default format] is used.<br/> 
Otherwise must be a valid date format as described by [http://google-web-toolkit.googlecode.com/svn/javadoc/2.0/com/google/gwt/i18n/client/DateTimeFormat.html DateTimeFormat]</td>
<td>Custom converter supported</td>
</tr>
<tr>
<td>double, Double</td>
<td>`<fieldname>`</td>
<td>If no format is specified the JSON data is expected to be a JSON number, otherwise the JSON data is expected to be a JSON string and the format must be a valid number format as described by  [http://google-web-toolkit.googlecode.com/svn/javadoc/2.0/com/google/gwt/i18n/client/NumberFormat.html NumberFormat]</td>
<td>Custom converter supported</td>
</tr>
<tr>
<td>float, Float</td>
<td>`<fieldname>`</td>
<td>If no format is specified the JSON data is expected to be a JSON number, otherwise the JSON data is expected to be a JSON string and the format must be a valid number format as described by  [http://google-web-toolkit.googlecode.com/svn/javadoc/2.0/com/google/gwt/i18n/client/NumberFormat.html NumberFormat]</td>
<td>Custom converter supported</td>
</tr>
<tr>
<td>int, Integer</td>
<td>`<fieldname>`</td>
<td>If no format is specified the JSON data is expected to be a JSON number, otherwise the JSON data is expected to be a JSON string and the format must be a valid number format as described by  [http://google-web-toolkit.googlecode.com/svn/javadoc/2.0/com/google/gwt/i18n/client/NumberFormat.html NumberFormat]</td>
<td>Custom converter supported</td>
</tr>
<tr>
<td>long, Long</td>
<td>`<fieldname>`</td>
<td>If no format is specified the JSON data is expected to be a JSON number, otherwise the JSON data is expected to be a JSON string and the format must be a valid number format as described by  [http://google-web-toolkit.googlecode.com/svn/javadoc/2.0/com/google/gwt/i18n/client/NumberFormat.html NumberFormat]</td>
<td>Custom converter supported</td>
</tr>
<tr>
<td>short, Short</td>
<td>`<fieldname>`</td>
<td>Must be a JSON number. No format supported. If specified it is ignored.</td>
<td>No custom converter supported. If specified it is ignored.</td>
</tr>
<tr>
<td>String</td>
<td>`<fieldname>`</td>
<td>No format supported. If specified it is ignored.</td>
<td>No custom converter supported. If specified it is ignored.</td>
</tr>
<tr>
<td>Enums</td>
<td>`<fieldname>`</td>
<td>No format supported. If specified it is ignored.</td>
<td>Custom converter supported</td>
</tr>
<tr>
<td>All types T for which a JsonReader`<T>` is registered</td>
<td>`<fieldname>`</td>
<td>No format supported. If specified it is ignored.</td>
<td>No custom converter supported. If specified it is ignored.</td>
</tr>
<tr>
<td>Arrays of the above types</td>
<td>`<fieldname>`</td>
<td>If a format is specified it is applied for all array elements.</td>
<td>If a custom converter is specified it is applied to all array elements.</td>
</tr>
<tr>
<td>Typed collections of the above types</td>
<td>`<fieldname>`</td>
<td>If a format is specified it is applied for all collection elements.</td>
<td>If a custom converter is specified it is applied to all array elements.</td>
</tr>
</table>

= Example = 
Let's assume you want to map the following JSON data
{{{
{
    "isbn": "978-0345417954", 
    "pages": 432,
    "title": "The Hotel New Hampshire",
    "author": {
        "firstname": "John",
        "surname": "Irving", 
    },
    "reviews": [
        "A hectic gaudy saga with the verve of a Marx Brothers movie.", 
        "Rejoice! John Irving has written another book according to your world.", 
        "Spellbinding, intensely human, a high-wire act of dazzling virtuosity."
    ]
}    
}}}

Therefore you have the following POJOs in your GWT client
{{{
public class Book
{
    String isbn;
    int pages;
    String title;
    Author author;
    List<String> reviews;
}

public class Author
{
    String firstname;
    String surname;
}
}}}

To map the JSON to your classes, all you have to do is annotate the relevant fields and define an interface of type JsonReader`<T>`;
{{{
public class Book
{
    interface BookReader extends JsonReader<Book> {}
    public static final BookReader JSON = GWT.create(BookReader.class);

    @Json String isbn;
    @Json int pages;
    @Json String title;
    @Json Author author;
    @Json List<String> reviews;
}

public class Author
{
    interface AuthorReader extends JsonReader<Author> {}
    public static final AuthorReader JSON = GWT.create(AuthorReader.class);

    @Json String firstname;
    @Json String surname;
}
}}}

Now you can map the JSON by calling
{{{
String jsonString = ...; // the above JSON data
Book book = Book.JSON.read(jsonString);
}}}

Please note that Piriti does *not* use javascript `eval()` but the browsers native JSON parser (or a javascript emulation if no native parser is available). Hence the JSON data must confirm to the syntax described at [http://json.org/ JSON.org]. Especially the keys must be enclosed in ". So instead of 
{{{
{ readonly: true, name: "Foo", createdAt: "08.01.2010", count: 20 }
}}}
you have to use
{{{
{ "readonly": true, "name": "Foo", "createdAt": "08.01.2010", "count": 20 }
}}}