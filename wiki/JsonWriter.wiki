#summary Serializing POJOs to JSON

= Introduction =

POJOs can be serialized to JSON by using the same [http://piriti.googlecode.com/svn/site/apidocs/name/pehl/piriti/client/json/JsonField.html @JsonField] annotation which is used for parsing. 

= Serialization = 
To generate JSON from existings POJO instances you have to define a `JsonWriter<T>` interface. In almost any case you would also have a `JsonReader<T>` for parsing  
{{{
public class Book
{
    public interface BookJsonReader extends JsonReader<Book> {}
    public static final BookJsonReader IN = GWT.create(BookJsonReader.class);

    public interface BookJsonWriter extends JsonWriter<Book> {}
    public static final BookJsonWriter OUT = GWT.create(BookJsonWriter.class);

    @JsonField String isbn;
    @JsonField int pages;
    @JsonField String title;
    @JsonField Author author;
    @JsonField List<String> reviews;
    @JsonField List<Book> related;
}

public class Author
{
    public interface AuthorJsonReader extends JsonReader<Author> {}
    public static final AuthorJsonReader IN = GWT.create(AuthorJsonReader.class);

    public interface AuthorJsonWriter extends JsonWriter<Author> {}
    public static final AuthorJsonWriter OUT = GWT.create(AuthorJsonWriter.class);

    @JsonField String firstname;
    @JsonField String surname;
    @JsonField Book bestseller;
}
}}}

A typical scenario is to parse the JSON data from the server, make some modifications and send back the modified JSON:
{{{
String json = ...; // received from the server
Book book = Book.IN.read(json);
book.title += " 2nd edition";
json = Book.OUT(book);
}}} 
