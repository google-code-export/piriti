#summary Readers and Writer in Piriti

Readers and writers are one of the basic building blocks. Piriti knows four interfaces:
  # JsonReader`<T>`: To map from JSON to POJO
  # JsonWriter`<T>`: To serialize POJOs to JSON 
  # XmlReader`<T>`: To map from XML to POJO
  # XmlWriter`<T>`: To serialize POJOs to XML (not yet implemented)
  

=== Classic Setup ===
Typically you define your readers and writer as nested interfaces (if you're familiar with UiBinder this shouldn't be a big challenge)
{{{
public class Book
{
    public interface BookJsonWriter extends JsonWriter<Book> {}
    public static final BookJsonWriter JSON_WRITER = GWT.create(BookJsonWriter.class);

    public interface BookJsonReader extends JsonReader<Book> {}
    public static final BookJsonReader JSON_READER = GWT.create(BookJsonReader.class);

    public interface BookXmlReader extends XmlReader<Book> {}
    public static final BookXmlReader XML_READER = GWT.create(BookXmlReader.class);

    public interface BookXmlWriter extends XmlWriter<Book> {}
    public static final BookXmlWriter XML_WRITER = GWT.create(BookXmlWriter.class);
    
    // The actual fields
    ...
}}}


=== GIN Setup ===
In case you use GIN, I recommend to let GIN inject the readers / writers implementations:
{{{
public class AcmeModule extends AbstractModule
{
    @Override
    protected void configure()
    {
        bind(FooReader.class).asEagerSingleton();
        bind(BarReader.class).asEagerSingleton();
        ...
    }
}}}    
{{{
public class SomeClassUsingReader
{
    private final FooReader reader; 
     
    @Inject
    public SomeClassUsingReader(FooReader reader)
    {
        this.reader = reader;
    }
    
    ...
}}}
Please make sure you bind the reader and writer implementations as eager singeltons. Otherwise relations between your POJOs might not get (de)serialized.  


=== Genereted Code ===
In any case a reader / writer implementation is generated for you which (de)serializes all fields in the specified POJO and its superclasses. See [SupportedTypes supported types] and [default behaviour / annotations DefaultsAndAnnotations] for more details. 
