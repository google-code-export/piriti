#summary Readers and Writer in Piriti

Besides the annotations readers and writers are another important building block. Piriti knows four interfaces:
  # JsonReader`<T>`: To map from JSON to POJO
  # JsonWriter`<T>`: To serialize POJOs to JSON 
  # XmlReader`<T>`: To map from XML to POJO
  # XmlWriter`<T>`: To serialize POJOs to XML (not yet implemented)

Typically you define your readers and writer as nested interfaces (if you're familiar with UiBinder this shouldn't be a big challenge)
{{{
public class Book
{
    public interface BookJsonWriter extends JsonWriter<Book> {}
    public static final BookJsonWriter JSON_WRITER = GWT.create(BookJsonWriter.class);

    public interface BookJsonReader extends JsonReader<Book> {}
    public static final BookJsonReader JSON_READER = GWT.create(BookJsonReader.class);

    public interface BookXmlReader extends XmlReader<Book> {}
    public static final BookXmlReader XML_READER = GWT.create(BookXmlReader.class);

    public interface BookXmlWriter extends XmlWriter<Book> {}
    public static final BookXmlWriter XML_WRITER = GWT.create(BookXmlWriter.class);
    
    // The actual fields
    ...
}}}

But it is also ok to define the readers / writers as standalone interfaces:
{{{
public interface BookReader extends JsonReader<Book>
{
    BookReader INSTANCE = GWT.create(BookReader.class);
}
}}}

However the actual implementation is generated for you using defered binding.