#summary A short introduction to the library.
#labels Featured

This page shows how to use piriti by mapping a XML document to model classes.

= Prerequisites =

Piriti maps the XML by using XPath expressions. Therefore [http://code.google.com/p/gwtxpath/ GWTXPath] is used. Furthermore [http://code.google.com/p/google-gin/ GIN] is used for the wiring of some classes. To sum it up you have to add the following jar files to your project:
  * [http://code.google.com/p/google-gin/ GIN]
  * [http://code.google.com/p/gwtxpath/ GWTXPath]

Then add the following to your GWT module definition
{{{
    <inherits name="name.pehl.gwt.piriti.Piriti" />
}}}

= Mapping =

Piriti does not require your model classes to inherit some base class. Instead it heavily makes use of annotations and deferred binding. The way it works is similiar to the UiBinder in GWT 2.0. 

Let's assume you want to map the following XML
{{{
<book>
    <isbn>978-0345417954</isbn>
    <pages>432</pages>
    <title>The Hotel New Hampshire</title>
    <author>
        <firstname>John</firstname>
        <surname>Irving</surname>
    </author>
    <reviews>
        <review>A hectic gaudy saga with the verve of a Marx Brothers movie.</review>
        <review>Rejoice! John Irving has written another book according to your world. You must read this book.</review>
        <review>Spellbinding, intensely human, a high-wire act of dazzling virtuosity.</review>
    </reviews>
</book>
}}}

Therefore you have the following model classes in your GWT client
{{{
public class Book
{
    String isbn;
    int pages;
    String title;
    Author author;
    List<String> reviews;
}

public class Author
{
    String firstname;
    String surname;
}
}}}

To map the XML to your model, all you have to do is annotate the relevant fields in your model and define an interface of type XmlReader<T>
{{{
public class Book
{
    interface BookReader extends XmlReader<Book> {}
    public static final BookReader XML = GWT.create(BookReader);

    @XmlField String isbn;
    @XmlField int pages;
    @XmlField String title;
    @XmlField Author author;
    @XmlField("reviews/review") List<String> reviews;
}

public class Author
{
    interface AuthorReader extends XmlReader<Author> {}
    public static final AuthorReader XML = GWT.create(AuthorReader);

    @XmlField String firstname;
    @XmlField String surname;
}
}}}

Now you can map the XML to your model by calling
{{{
Document document = ...; // XML representation of the book resource
Book book = Book.XML.readSingle(document);
}}}

= How it works = 
As mentioned above piriti makes heavy use of deferred binding. The line
{{{
public static final BookReader XML = GWT.create(BookReader);
}}}
generates an implementation which evaluates XPath expressions and assigns the results to the annotated fields. The XPath expression defaults to the fields name and an assignment is done only if the XPath expression results in a none-null value. 

Please note that at the moment the annotations can only be on fields and that the fields must have default or protected access modifiers. 

Because all XmlReader instances are registered against a global registry, nested POJOs which also have an static reference to a XmlReader are recognized and mapped. See Features for a more detailed description of piriti.