#summary How to get started.
#labels Featured

Actually Piriti consists of four modules:
  * [Features piriti-core]: The core classes to map JSON and XML
  * [GXTExtension piriti-gxt]: An extension to map the data into GXT ModelData instance. Work in progress...
  * [RestletExtension piriti-restlet]: An extension for the Restlet GWT edition. Contains resources which use the readers from piriti-core. Work in progress...
  * [SampleApplication piriti-sample]: A sample application deployed on Google AppEngine which demonstrates Piritis features. Work in progress...

= Prerequisites =
To use Piriti add the following repository and dependencies to your pom:
{{{
<repository>
    <id>piriti-repo</id>
    <name>Piriti Repository</name>
    <url>http://piriti.googlecode.com/svn/repository</url>
</repository>

...

<dependency>
    <groupId>name.pehl.piriti</groupId>
    <artifactId>piriti-core</artifactId>
    <version>0.3</version>
    <scope>provided</scope>
</dependency>
<dependency>
    <groupId>name.pehl.piriti</groupId>
    <artifactId>piriti-gxt</artifactId>
    <version>0.3</version>
    <scope>provided</scope>
</dependency>
<dependency>
    <groupId>name.pehl.piriti</groupId>
    <artifactId>piriti-restlet</artifactId>
    <version>0.3</version>
    <scope>provided</scope>
</dependency>
}}}

= Mapping =
To actually map JSON and/or XML data you have to first make sure that Piriti is referenced in your module definition:
{{{
<inherits name="name.pehl.piriti.Piriti" />
}}}

Then you define the reader instance and annotations in your your model classes:
{{{
public class Book
{
    interface BookReader extends XmlReader<Book> {}
    public static final BookReader XML = GWT.create(BookReader.class);

    @XmlField String isbn;
    @XmlField int pages;
    @XmlField String title;
}
}}}
Doing so you can read and convert an XML document to an instance of Book by calling:
{{{
Document document = ...
Book book = Book.XML.read(document);
}}}