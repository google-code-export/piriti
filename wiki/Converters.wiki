#summary Converters in Piriti

= Converters =
Most of the data read from JSON and XML is converted to the fields type using specific converters. When serializing POJOs to JSON / XML these converters are used to convert from the fields type to string. Piriti uses an internal registry with these default converters:
  * boolean / Boolean → !BooleanConverter
  * byte / Byte → !ByteConverter
  * char / Character → !CharacterConverter
  * double / Double → !DoubleConverter
  * float / Float → !FloatConverter
  * int / Integer → !IntegerConverter
  * long / Long → !LongConverter
  * short / Short → !ShortConverter
  * Date → !DateConverter
  * java.sql.Date → !SqlDateConverter
  * java.sql.Time → !TimeConverter 
  * java.sql.Timestamp → !TimestampConverter
  
All converters implement the Converter interface:
{{{
public interface Converter<T>
{
    /**
     * Converts the specified value to the type T.
     * 
     * @param value
     *            The string to be converted. May be <code>null</code>.
     * @param format
     *            An optional format of the value (eg for dates). Should be
     *            {@code null} if no format is supported
     * @return The converted type or <code>null</code> if a conversion is not
     *         possible
     */
    T convert(@Nullable String value, @Nullable String format);


    /**
     * Serializes the specified value to a string.
     * 
     * @param value
     *            The value to serialize. May be <code>null</code>.
     * @param format
     *            An optional format of the value (eg for dates). Should be
     *            {@code null} if no format is supported
     * @return The serialized string or <code>null</code> if no value was given.
     */
    String serialize(@Nullable T value, @Nullable String format);
}
}}}

== When to use ==
When reading data from JSON / XML, please note that you can only use converters if the input is string. When reading from XML, this is always true. But when reading from JSON converters can only be used for strings. Booleans and numbers cannot be converted using a custom converter! So in the following example 
{{{
{
    "expired": true,
    "age": 24,
    "date": "24.10.2010", 
    "duration": "4.5h"
}
}}}
you can only use converters for `date` and `duration`. An converter for `duration` could be implemented like this:
{{{
public DurationConverter extends Converter<Double>
{
    @Override
    public Double convert(String value, String format)
    {
        if (value != null && value.length() > 0)
        {
            return Double.valueOf(value.substring(0, value.length() - 1));
        }
        return 0d;
    }


    @Override
    public String serialize(Double value, String format)
    {
        return value + "h";
    }
}
}}}
{{{
public class TimeEntry
{
    boolean expired;
    int age;
    Data date;
    @Convert(DurationConverter.class) double duration;
}
}}}
