#summary XML Mapping with Piriti.

= Introduction =

XML mapping is done using the `XmlField` annotation:
{{{
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
public @interface XmlField
{
    /**
     * An XPath expression to select the XML data. Defaults to "" which means
     * that the fields name is taken as a base for the XPath expression.
     * 
     * @return
     */
    String value() default "";


    /**
     * The format to use when converting the XML data to the fields type.
     * Defaults to "".
     * 
     * @return
     */
    String format() default "";
}
}}}

This annotation is specified for every field you want to map. If no XPath expression is given, the fields name is taken as a base for the XPath expression. The following table shows what XPath expressions are used and which format options are possible:
<table cellpadding="3" cellspacing="0" border="1">
<tr>
<th align="left">Type</th>
<th align="left">Default XPath expression</th>
<th align="left">Format options</th>
</tr>
<tr>
<td>boolean, Boolean</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>byte, Byte</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>char, Character</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>java.util.Date</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified a [http://piriti.googlecode.com/svn/site/apidocs/constant-values.html#name.pehl.gwt.piriti.client.converter.DateConverter.DEFAULT_FORMAT default format] is used.<br/> 
Otherwise must be a valid date format as described by [http://google-web-toolkit.googlecode.com/svn/javadoc/1.5/com/google/gwt/i18n/client/DateTimeFormat.html DateTimeFormat]</td>
</tr>
<tr>
<td>double, Double</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified the XML data is converted using
[http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Double.html#parseDouble(java.lang.String) Double.parseDouble(String)].<br/> 
Otherwise must be a valid number format
as described by [http://google-web-toolkit.googlecode.com/svn/javadoc/1.5/com/google/gwt/i18n/client/NumberFormat.html NumberFormat]</td>
</tr>
<tr>
<td>float, Float</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified the XML data is converted using
[http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Float.html#parseFloat(java.lang.String) Float.parseFloat(String)].<br/> 
Otherwise must be a valid number format
as described by [http://google-web-toolkit.googlecode.com/svn/javadoc/1.5/com/google/gwt/i18n/client/NumberFormat.html NumberFormat]</td>
</tr>
<tr>
<td>int, Integer</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified the XML data is converted using
[http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html#parseInt(java.lang.String) Integer.parseInt(String)].<br/> 
Otherwise must be a valid number format
as described by [http://google-web-toolkit.googlecode.com/svn/javadoc/1.5/com/google/gwt/i18n/client/NumberFormat.html NumberFormat]</td>
</tr>
<tr>
<td>long, Long</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified the XML data is converted using
[http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Long.html#parseLong(java.lang.String) Long.parseLong(String)].<br/> 
Otherwise must be a valid number format
as described by [http://google-web-toolkit.googlecode.com/svn/javadoc/1.5/com/google/gwt/i18n/client/NumberFormat.html NumberFormat]</td>
</tr>
<tr>
<td>short, Short</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>String</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>Enums</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>All types T for which a XmlReader`<T>` is registered</td>
<td>`<fieldname>`</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>Arrays of the above types</td>
<td>`<fieldname>`</td>
<td>If a format is specified it is applied for all array elements.</td>
</tr>
<tr>
<td>Typed collections of the above types</td>
<td>`<fieldname>`</td>
<td>If a format is specified it is applied for all collection elements.</td>
</tr>
</table>

= Example = 
Let's assume you want to map the following XML
{{{
<book>
    <isbn>978-0345417954</isbn>
    <pages>432</pages>
    <title>The Hotel New Hampshire</title>
    <author>
        <firstname>John</firstname>
        <surname>Irving</surname>
    </author>
    <reviews>
        <review>
            A hectic gaudy saga with the verve of a Marx Brothers movie.
        </review>
        <review>
            Rejoice! John Irving has written another book according to your world. 
            You must read this book.
        </review>
        <review>
            Spellbinding, intensely human, a high-wire act of 
            dazzling virtuosity.
        </review>
    </reviews>
</book>
}}}

Therefore you have the following model classes in your GWT client
{{{
public class Book
{
    String isbn;
    int pages;
    String title;
    Author author;
    List<String> reviews;
}

public class Author
{
    String firstname;
    String surname;
}
}}}

To map the XML to your model, all you have to do is annotate the relevant fields in your model and define an interface of type XmlReader`<T>`;
{{{
public class Book
{
    interface BookReader extends XmlReader<Book> {}
    public static final BookReader XML = GWT.create(BookReader.class);

    @XmlField String isbn;
    @XmlField int pages;
    @XmlField String title;
    @XmlField Author author;
    @XmlField("reviews/review") List<String> reviews;
}

public class Author
{
    interface AuthorReader extends XmlReader<Author> {}
    public static final AuthorReader XML = GWT.create(AuthorReader.class);

    @XmlField String firstname;
    @XmlField String surname;
}
}}}

Now you can map the XML to your model by calling
{{{
Document document = ...; // the com.google.gwt.xml.client.Document for the book
Book book = Book.XML.readSingle(document);
}}}