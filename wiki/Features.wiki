#summary Description of the features and limitations of piriti.
#labels Featured

= Mapping =

All mapping information in piriti is provided by the [http://piriti.googlecode.com/svn/trunk/site/apidocs/name/pehl/gwt/piriti/client/xml/XmlField.html @XmlField] annotation. This annotation takes two optional parameters:
  # The XPath expression. 
  If omitted the field name is taken as a basis for the XPath expression
  # The format for converting the XML to the fields type. 
  If omitted no format is used.

= Supported types =

The @XmlField annotation does not work on all types. The following tables show which types are supported and which XPath expression is the default for that type.
<table>
<thead>
<tr>
<th>Type</th>
<th>Default xpath expression</th>
<th>Format options</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean, Boolean</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>byte, Byte</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>char, Character</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>java.util.Date</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified a
{@linkplain name.pehl.gwt.piriti.client.converter.DateConverter#DEFAULT_FORMAT
default format} is used. Otherwise must be a valid date format as described
by {@link DateTimeFormat}</td>
</tr>
<tr>
<td>double, Double</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified the XML data is converted using
{@link Double#parseDouble(String)}. Otherwise must be a valid number format
as described by {@link NumberFormat}</td>
</tr>
<tr>
<td>float, Float</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified the XML data is converted using
{@link Float#parseFloat(String)}. Otherwise must be a valid number format as
described by {@link NumberFormat}</td>
</tr>
<tr>
<td>int, Integer</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified the XML data is converted using
{@link Integer#parseInt(String)}. Otherwise must be a valid number format as
described by {@link NumberFormat}</td>
</tr>
<tr>
<td>long, Long</td>
<td>`<fieldname>`/text()</td>
<td>If no format is specified the XML data is converted using
{@link Long#parseLong(String)}. Otherwise must be a valid number format as
described by {@link NumberFormat}</td>
</tr>
<tr>
<td>short, Short</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>String</td>
<td>`<fieldname>`/text()</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>POJOs for which a {@link XmlReader} is registered</td>
<td>`<fieldname>`</td>
<td>No format supported. If specified it is ignored.</td>
</tr>
<tr>
<td>Arrays of the above types</td>
<td>`<fieldname>`</td>
<td>If a format is specified it is applied for all array elements.</td>
</tr>
<tr>
<td>Typed collections of the above types</td>
<td>`<fieldname>`</td>
<td>If a format is specified it is applied for all collection elements.</td>
</tr>
</tbody>
</table>

Supported collections:

  * Collection
  * List
  * ArrayList
  * LinkedList
  * Set
  * HashSet
  * SortedSet
  * TreeSet 

Supported maps:

  * Map
  * HashMap
  * SortedMap
  * TreeMap 

Please note that all collections and maps must have type parameters, otherwise they cannot be mapped. 

= Limitations = 

  * The mapping of arrays, collections and maps is not yet implemented.
  * Annotations are currently limited to fields. 
  * The annotated fields must have default or protected access modifiers.

= Planed =

  * Add the ability to also generate XML from the annotated pojos.