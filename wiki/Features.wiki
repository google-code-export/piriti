#summary Description of the features and limitations of piriti.
#labels Featured

Piriti is able to map fairly complex *JSON* and *XML* data to arbitrary POJOs. All mapping information is provided using annotations. The actual mapping code is generated for you by deferred binding. 

= Supported types =

The mapping annotations do not work on all types. The following tables show which types are supported by Piriti.
  * boolean, Boolean
  * byte, Byte
  * short, Short
  * int, Integer
  * long, Long
  * float, Float
  * double, Double
  * char, Character
  * String
  * java.util.Date
  * Enums
  * All types T for which a reader registered
  * Arrays of the above types
  * Typed collections of the above types

== Supported collections ==

When mapping collections the following types are supported:
  * Collection`<T>`. ArrayList`<T>` is choosen as the implementation.
  * List`<T>`. ArrayList`<T>` is choosen as the implementation.
  * ArrayList`<T>`
  * LinkedList`<T>`
  * Set`<T>`. HashSet`<T>` is choosen as the implementation.
  * HashSet`<T>`
  * SortedSet`<T>`. TreeSet`<T>` is choosen as the implementation.
  * TreeSet`<T>`

= Limitations = 

The following lists summarize the limitations in Piriti.
  * Multi-dimensional arrays are not supported.
  * Arrays of collections / maps are not supported.
  * Untyped collections are not supported.
  * Collections of collections / maps are not supported.
  * Recursive models are not supported (Book contains a list of related books).
  * Annotations are currently limited to fields. 
  * The annotated fields must not have private access modifiers.

= Planed =

In future releases the following features might be implemented:
  * Support for recursive models
  * Add the ability to also generate JSON / XML data from the annotated models.