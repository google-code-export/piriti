#macro(writerImports)
	import static java.util.logging.Level.*;
	
	import java.util.HashMap;
    import java.util.Iterator;
	import java.util.List;
	import java.util.logging.Logger;
    import java.util.Map;
	
	import name.pehl.piriti.commons.client.ModelWriteEvent;
	import name.pehl.piriti.commons.client.ModelWriteHandler;
    import name.pehl.piriti.converter.client.Converter;
    import name.pehl.piriti.converter.client.ConverterGinjector;
    import name.pehl.piriti.converter.client.ConverterRegistry;
	
    import com.google.gwt.core.client.GWT;
	import com.google.gwt.event.shared.GwtEvent;
	import com.google.gwt.event.shared.HandlerManager;
	import com.google.gwt.event.shared.HandlerRegistration;
#end


#macro(writerFields)
    private static Logger logger = Logger.getLogger("$typeContext.rwType.qualifiedSourceName");
    private final HandlerManager handlerManager;
    private final ConverterRegistry converterRegistry;
    private final Map<String, $modelType> idMap;
#end


#macro(writerConstructorBody)
    this.handlerManager = new HandlerManager(this);
    this.converterRegistry = ConverterGinjector.INJECTOR.getConverterRegistry();
    this.idMap = new HashMap<String, $modelParameterizedType>();
#end


#macro(writerEventMethods)
    @Override
    public HandlerRegistration addModelWriteHandler(ModelWriteHandler<$modelParameterizedType> handler) 
    {
        return handlerManager.addHandler(ModelWriteEvent.getType(), handler);
    }

    @Override
    public void fireEvent(GwtEvent<?> event) 
    {
        handlerManager.fireEvent(event);
    }
#end