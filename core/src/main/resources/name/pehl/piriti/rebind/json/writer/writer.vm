#set($modelType = $typeContext.type.qualifiedSourceName)
#set($modelParameterizedType = $typeContext.type.parameterizedQualifiedSourceName)

package ${typeContext.rwType.package.name};

#writerImports()

import name.pehl.piriti.json.client.JsonGinjector;
import name.pehl.piriti.json.client.JsonWriter;
import name.pehl.piriti.json.client.JsonRegistry;

public class $implName implements $typeContext.rwType.qualifiedSourceName 
{
public class $implName implements $typeContext.rwType.qualifiedSourceName 
{
    // --------------------------------------------------------- private fields

    #readerFields()    
    private final JsonRegistry jsonRegistry;
    

    // ----------------------------------------------------------- constructors

    public $implName() 
    {
        #writerConstructorBody()
        this.jsonRegistry = JsonGinjector.INJECTOR.getJsonRegistry();
        this.jsonRegistry.register(${modelType}.class, this);
    }
    
    
    #writerEventMethods()    

    // ---------------------------------------------------------- write methods

    public String toJson(List<$modelParameterizedType> models, String arrayKey)
    {
        String json = null;
        if (models != null && arrayKey != null) 
        {
            StringBuilder out = new StringBuilder();
            out.append("{\"").append(arrayKey).append("\":[");
            for (Iterator<$modelParameterizedType> iter = models.iterator(); iter.hasNext(); ) 
            {
                $modelParameterizedType model = iter.next();
                String modelJson = toJson(model);
                if (modelJson != null) 
                {
                    out.append(modelJson);
                }
                if (iter.hasNext()) 
                {
                    out.append(",");
                }
            }
            out.append("]}");
            json = out.toString();
        }
        return json;
    }
    
    public String toJson($modelParameterizedType model)
    {
        String json = null;
        if (model != null) 
        {
            ModelWriteEvent.fire(this, model);
            StringBuilder out = new StringBuilder();
            out.append("{");
            #foreach ($property in $typeContext.properties)
                #parse($property.template)
            #end
            #if ($velocityCount < $typeContext.properties.size() - 1)
                out.append(",");
            #end
            out.append("}");
            json = out.toString();
        }
        return json;
    }
}