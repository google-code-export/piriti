#set($modelType = $typeContext.type.qualifiedSourceName)
#set($modelParameterizedType = $typeContext.type.parameterizedQualifiedSourceName)

package ${typeContext.rwType.package.name};

import static java.util.logging.Level.*;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import name.pehl.piriti.json.client.AbstractJsonWriter;
import name.pehl.piriti.converter.client.Converter;
import name.pehl.piriti.json.client.JsonWriter;

import com.google.gwt.core.client.GWT;
import com.google.gwt.core.client.JsonUtils;


public class $implName extends AbstractJsonWriter<$modelParameterizedType> implements $typeContext.rwType.qualifiedSourceName 
{
    // ----------------------------------------------------------- constructors

    public $implName() 
    {
        this.jsonRegistry.register(${modelType}.class, this);
    }
    
    
    // --------------------------------------------------------- new... methods
    
    protected Map<String, $modelParameterizedType> newIdMap()
    {
        return new HashMap<String, $modelParameterizedType>();
    }
    
    // ---------------------------------------------------------- write methods

    @Override
    public String toJson($modelParameterizedType model)
    {
        String json = null;
        if (model != null) 
        {
            StringBuilder out = new StringBuilder();
            out.append("{");
            #foreach ($property in $typeContext.properties)
				#set($valueType = $property.type.qualifiedSourceName)
				#set($parameterizedValueType = $property.type.parameterizedQualifiedSourceName)
				#set($value = $property.variables.value)
				#set($valueAsString = $property.variables.valueAsString)
				#set($converter = $property.variables.newVariable("Converter"))
				
                // parsing template $property.template
                if (logger.isLoggable(FINE)) 
                {
                    logger.log(FINE, "Processing $parameterizedValueType $property.name");
                }
				$parameterizedValueType $value = null;
			    #if ($property.getter)
			        $property.getter getter = GWT.create(${property.getter}.class);
			        $value = getter.get(model);
			    #else
			        #if ($property.accessibleField) 
			            $value = model.$property.name;
			        #elseif ($property.callableGetter) 
			            $value = model.${property.callableGetterName}(); 
			        #else
			            if (logger.isLoggable(SEVERE)) 
			            {
			                logger.log(SEVERE, "No accessible field or getter found for property $property.name in ${modelType}.");
			            }
			        #end
			    #end
				out.append("\"$property.name\":");
                ## Here happens the actual conversion / writing from $value into the StringBuilder
                #parse($property.template)
	            #if ($foreach.hasNext) 
	               out.append(","); 
                #end
            #end
            out.append("}");
            json = out.toString();
            ModelWriteEvent.fire(this, model);
        }
        return json;
    }
}