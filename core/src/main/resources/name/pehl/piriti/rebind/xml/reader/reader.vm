#set($modelType = $typeContext.type.qualifiedSourceName)
#set($modelParameterizedType = $typeContext.type.parameterizedQualifiedSourceName)

package ${typeContext.rwType.package.name};

import static java.util.logging.Level.*;
import static name.pehl.totoe.commons.client.WhitespaceHandling.*;

import java.util.ArrayList;
import java.util.List;

import name.pehl.piriti.xml.client.AbstractXmlReader;
import name.pehl.piriti.xml.client.XmlReader;
import name.pehl.totoe.xml.client.Element;
import name.pehl.totoe.xml.client.Node;

import com.google.gwt.core.client.GWT;

public class $implName extends AbstractXmlReader<$modelParameterizedType> implements $typeContext.rwType.qualifiedSourceName 
{
    // ----------------------------------------------------------- constructors

    public $implName() 
    {
        this.xmlRegistry.register(${modelType}.class, this);
    }
    
    
    // ------------------------------------------------------------ new methods
    
    protected $modelParameterizedType newModel()
    {
        $modelParameterizedType model = null;
        #if ($typeContext.instanceCreator)
            $typeContext.instanceCreator.qualifiedSourceName instanceCreator = GWT.create(${typeContext.instanceCreator.qualifiedSourceName}.class);
            model = instanceCreator.newInstance(jsonObject);
        #else
            model = GWT.create(${modelType}.class); 
        #end
        return model;
    }
    
    
    // ----------------------------------------- ids, properties and references

    protected $modelParameterizedType readId(Element element)
    {
        #if ($typeContext.id)
            $modelParameterizedType model = null;
            #set($property = $typeContext.id)
            #parse($property.templates.main)
        #else
            $modelParameterizedType model = newModel();
        #end
        
        ## Process IDs in arays and collections
        #foreach ($property in $typeContext.properties)
            #if ($property.type.isArray() || $TypeUtils.isCollection($property.type))
                #if ($TypeUtils.canContainId($property.elementType) && !$property.converter)
	                #set($elements = $property.variables.newVariable("Elements"))
	                #set($elementType = $property.elementType.parameterizedQualifiedSourceName)
	                if (logger.isLoggable(FINE)) 
	                {
	                    logger.log(FINE, "Processing nested IDs in $property.type.parameterizedQualifiedSourceName $property.name");
	                }
                    #newConcreteTypes()
                    List<Element> $elements = filterElements(element.selectNodes("$property.pathOrName"));
                    if (!${elements}.isEmpty())
                    {
                        for (Element currentElement : $elements)
                        {
                            @SuppressWarnings("unused") $elementType currentValue = null;
                            #parse($property.templates.elementType)
                        }
                    }
                #end
            #end
        #end
        return model;
    }


    protected $modelParameterizedType readProperties(Element element, $modelParameterizedType model) 
    {
        if (element != null) 
        {
            #foreach ($property in $typeContext.properties)
                #set($valueType = $property.type.qualifiedSourceName)
                #set($parameterizedValueType = $property.type.parameterizedQualifiedSourceName)
                #set($value = $property.variables.value)
                #set($valueAsString = $property.variables.valueAsString)
                #set($converter = $property.variables.newVariable("Converter"))
                // parsing template $property.templates.main
                if (logger.isLoggable(FINE)) 
                {
                    logger.log(FINE, "Processing $parameterizedValueType $property.name");
                }
                $parameterizedValueType $value = null;
                ## Here happens the actual reading / conversion from element to $value
                #parse($property.templates.main)
	            #assignValue()
            #end
        }
        return model;
    }


    protected $modelParameterizedType readIdRefs(Element element, $modelParameterizedType model)
    {
        #if (!$typeContext.references.isEmpty())
	        if (element != null)
	        {
		        #foreach ($property in $typeContext.references)
	                #set($valueType = $property.type.qualifiedSourceName)
	                #set($parameterizedValueType = $property.type.parameterizedQualifiedSourceName)
	                #set($value = $property.variables.value)
                    #set($reader = $property.variables.newVariable("Reader"))
	                // parsing template $property.templates.main
                    if (logger.isLoggable(FINE)) 
                    {
                        logger.log(FINE, "Processing references in $property.type.parameterizedQualifiedSourceName $property.name");
                    }
                    $parameterizedValueType $value = null;
                    #parse($property.templates.main)
                    #assignValue()
	            #end        
	        }
        #end
        
        ## Should we read references in arrays and collections? 
        ## Seems to work without it... 
        return model;
    }
}