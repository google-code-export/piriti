#set($modelType = $typeContext.type.qualifiedSourceName)
#set($modelParameterizedType = $typeContext.type.parameterizedQualifiedSourceName)

package ${typeContext.rwType.package.name};

import static java.util.logging.Level.*;
import static name.pehl.totoe.commons.client.WhitespaceHandling.*;

import java.util.ArrayList;
import java.util.List;

import name.pehl.piriti.xml.client.AbstractXmlReader;
import name.pehl.piriti.xml.client.XmlReader;
import name.pehl.totoe.xml.client.Element;
import name.pehl.totoe.xml.client.Node;

import com.google.gwt.core.client.GWT;

public class $implName extends AbstractXmlReader<$modelParameterizedType> implements $typeContext.rwType.qualifiedSourceName 
{
    // ----------------------------------------------------------- constructors

    public $implName() 
    {
        this.xmlRegistry.register(${modelType}.class, this);
    }
    
    
    // ------------------------------------------------------------ new methods
    
    protected $modelParameterizedType newModel()
    {
        $modelParameterizedType model = null;
        #if ($typeContext.instanceCreator)
            $typeContext.instanceCreator.qualifiedSourceName instanceCreator = GWT.create(${typeContext.instanceCreator.qualifiedSourceName}.class);
            model = instanceCreator.newInstance(jsonObject);
        #else
            model = GWT.create(${modelType}.class); 
        #end
        return model;
    }
    
    
    // ----------------------------------------- ids, properties and references

    protected $modelParameterizedType readId(Element element)
    {
        $modelParameterizedType model = newModel();
        #if ($typeContext.id)
            #set($property = $typeContext.id)
            #set($value = $property.variables.value)
            #set($converter = $property.variables.newVariable("Converter"))
            if (logger.isLoggable(FINE)) 
            {
                logger.log(FINE, "Processing ID String $property.name");
            }
            String $value = element.selectValue("$property.pathOrName", $property.whitespaceHandling);
		    #if ($property.converter)
		        #createConverter()
		        if ($value != null)
		        {
		            $value = ${converter}.convert(id);
		        }
		    #end
		    #assignValue()
		    if ($value != null)
		    {
                this.idMap.put($value, model);
            }
        #end
        
        ## Process IDs in arays and collections
        #foreach ($property in $typeContext.properties)
            #if ($property.type.isArray() || $TypeUtils.isCollection($property.type))
                #if ($TypeUtils.canContainId($property.elementType) && !$property.converter)
	                #set($elements = $property.variables.newVariable("Elements"))
	                #set($elementType = $property.elementType.parameterizedQualifiedSourceName)
	                if (logger.isLoggable(FINE)) 
	                {
	                    logger.log(FINE, "Processing nested IDs in $property.type.parameterizedQualifiedSourceName $property.name");
	                }
                    #newConcreteTypes()
                    List<Element> $elements = filterElements(element.selectNodes("$property.pathOrName"));
                    if (!${elements}.isEmpty())
                    {
                        for (Element currentElement : $elements)
                        {
                            @SuppressWarnings("unused") $elementType currentValue = null;
                            #parse($property.elementTypeTemplate)
                        }
                    }
                #end
            #end
        #end
        return model;
    }


    protected $modelParameterizedType readProperties(Element element, $modelParameterizedType model) 
    {
        if (element != null) 
        {
            #foreach ($property in $typeContext.properties)
                #set($valueType = $property.type.qualifiedSourceName)
                #set($parameterizedValueType = $property.type.parameterizedQualifiedSourceName)
                #set($value = $property.variables.value)
                #set($valueAsString = $property.variables.valueAsString)
                #set($converter = $property.variables.newVariable("Converter"))
                // parsing template $property.template
                if (logger.isLoggable(FINE)) 
                {
                    logger.log(FINE, "Processing $parameterizedValueType $property.name");
                }
                $parameterizedValueType $value = null;
                ## Here happens the actual reading / conversion from element to $value
                #parse($property.template)
	            #assignValue()
            #end
        }
        return model;
    }


    protected $modelParameterizedType readIdRefs(Element element, $modelParameterizedType model)
    {
        #if (!$typeContext.references.isEmpty())
	        if (element != null)
	        {
		        #foreach ($property in $typeContext.references)
                    #set($reader = $property.variables.newVariable("Reader"))
                    if (logger.isLoggable(FINE)) 
                    {
                        logger.log(FINE, "Processing references in $property.type.parameterizedQualifiedSourceName $property.name");
                    }
                    $parameterizedValueType $value = null;
		            #if ($property.type.isArray() || $TypeUtils.isCollection($property.type))
		                #if ($TypeUtils.canContainId($property.elementType) && !$property.converter)
		                    #set($elementType = $property.elementType.qualifiedSourceName)
	                        #newConcreteTypes()
	                        XmlReader<$elementType> $reader = xmlRegistry.getReader(${elementType}.class);
	                        if ($reader != null)
	                        {
	                            #set($references = $property.variables.newVariable("References"))
	                            String[] $references = element.selectValues("$property.pathOrName", $property.whitespaceHandling);
	                            if ($references != null && ${references}.length != 0)
	                            {
                                    #if ($property.type.isArray())
                                        $value = new ${elementType}[${references}.size()];
		                                for (String reference : $references)
		                                {
		                                    $elementType currentValue = ${reader}.idRef(reference);
		                                    if (currentValue != null)
		                                    {
		                                        #if ($property.type.isArray())
		                                            $value = new ${elementType}[${references}.size()];
		                                        #elseif ($TypeUtils.isCollection($property.type))
		                                            #set($collectionImplementation = $TypeUtils.collectionImplementationFor($valueType))
		                                            $value = new $collectionImplementation<$elementType>();
		                                        #end
		                                    }
		                                }
                                    #elseif ($TypeUtils.isCollection($property.type))
                                        #set($collectionImplementation = $TypeUtils.collectionImplementationFor($valueType))
                                        $value = new $collectionImplementation<$elementType>();
                                    #end
	                            }
	                        }
	                        
	                        
                        // TODO Handle references in arrays / collections
                        // value4 = new java.util.ArrayList<name.pehl.piriti.client.references.id.Employee>();
                        // for (String reference : value4References)
                        // {
                        //     name.pehl.piriti.client.references.id.Employee referenceInstance = value4Reader
                        //             .idRef(reference);
                        //     if (referenceInstance != null)
                        //     {
                        //         value4.add(referenceInstance);
                        //     }
                        // }
                    #else
    	                #set($valueType = $property.type.qualifiedSourceName)
    	                #set($parameterizedValueType = $property.type.parameterizedQualifiedSourceName)
	                    #newConcreteTypes()
	                    XmlReader<$parameterizedValueType> $reader = xmlRegistry.getReader(${valueType}.class);
	                    if ($reader != null)
	                    {
	                        String reference = element.selectValues("$property.pathOrName", $property.whitespaceHandling);
	                        if (reference != null)
	                        {
                                $value = ${reader}.idRef(reference);
                                #assignValue()
	                        }
                        }
                    #end



		        
			            #if ($property.type.isArray() || $TypeUtils.isCollection($property.type))
                            for (String reference : $references)
                            {
                                
                            }
                            // TODO Handle references in arrays / collections
		                    // value4 = new java.util.ArrayList<name.pehl.piriti.client.references.id.Employee>();
		                    // for (String reference : value4References)
		                    // {
		                    //     name.pehl.piriti.client.references.id.Employee referenceInstance = value4Reader
		                    //             .idRef(reference);
		                    //     if (referenceInstance != null)
		                    //     {
		                    //         value4.add(referenceInstance);
		                    //     }
		                    // }
			            #else
                            $value = ${reader}.idRef(${references}[0]);
		                #end
                    }
	            #end        
	        }
        #end
        return model;
    }
}