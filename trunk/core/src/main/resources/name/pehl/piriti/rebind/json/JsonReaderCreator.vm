#set($modelType = $typeContext.type.qualifiedSourceName)
#set($modelParameterizedType = $typeContext.type.parameterizedQualifiedSourceName)

package ${typeContext.rwType.package.name};

import static java.util.logging.Level.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;

import name.pehl.piriti.commons.client.InstanceContextHolder;
import name.pehl.piriti.commons.client.ModelReadEvent;
import name.pehl.piriti.commons.client.ModelReadHandler;
import name.pehl.piriti.converter.client.Converter;
import name.pehl.piriti.converter.client.ConverterGinjector;
import name.pehl.piriti.converter.client.ConverterRegistry;
import name.pehl.piriti.json.client.JsonGinjector;
import name.pehl.piriti.json.client.JsonReader;
import name.pehl.piriti.json.client.JsonRegistry;
import name.pehl.totoe.json.client.JsonPath;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.shared.GwtEvent;
import com.google.gwt.event.shared.HandlerManager;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.json.client.JSONArray;
import com.google.gwt.json.client.JSONNumber;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.json.client.JSONParser;
import com.google.gwt.json.client.JSONString;
import com.google.gwt.json.client.JSONValue;

public class $implName implements $typeContext.rwType.qualifiedSourceName 
{
    // --------------------------------------------------------- private fields
    
    private static Logger logger = Logger.getLogger("$typeContext.rwType.qualifiedSourceName");
    private final HandlerManager handlerManager;
    private final ConverterRegistry converterRegistry;
    private final JsonRegistry jsonRegistry;
    private final Map<String, $modelType> idMap;
    

    // ----------------------------------------------------------- constructors

    public $implName() 
    {
        this.handlerManager = new HandlerManager(this);
        this.converterRegistry = ConverterGinjector.INJECTOR.getConverterRegistry();
        this.jsonRegistry = JsonGinjector.INJECTOR.getJsonRegistry();
        this.jsonRegistry.register(${modelType}.class, this);
        this.idMap = new HashMap<String, $modelParameterizedType>();
    }
    
    
    // --------------------------------------------------------- event handling
    
    public HandlerRegistration addModelReadHandler(ModelReadHandler<$modelParameterizedType> handler) 
    {
        return handlerManager.addHandler(ModelReadEvent.getType(), handler);
    }

    public void fireEvent(GwtEvent<?> event) 
    {
        handlerManager.fireEvent(event);
    }
    
    
    // ------------------------------------------------------ read list methods

    public List<$modelParameterizedType> readList(String jsonString)
    {
        List<$modelParameterizedType> models = null;
        if (jsonString != null && jsonString.trim().length() != 0)
        {
            JSONObject jsonObject = JSONParser.parseStrict(jsonString).isObject();
            if (jsonObject != null)
            {
                Set<String> keys = jsonObject.keySet();
                if (keys != null && !keys.isEmpty())
                {
                    String arrayKey = keys.iterator().next();
                    JSONValue jsonValue = jsonObject.get(arrayKey);
                    if (jsonValue != null)
                    {
                        JSONArray jsonArray = jsonValue.isArray();
                        if (jsonArray != null)
                        {
                            models = new ArrayList<$modelParameterizedType>();
                            models = readList(jsonArray);
                        }
                    }
                }
            }
        }
        return models;
    }
    
    public List<$modelParameterizedType> readList(String jsonString, String arrayKey)
    {
        List<$modelParameterizedType> models = null;
        if (jsonString != null && jsonString.trim().length() != 0 && arrayKey != null)
        {
            JSONObject jsonObject = JSONParser.parseStrict(jsonString).isObject();
            if (jsonObject != null)
            {
                JSONValue jsonValue = jsonObject.get(arrayKey);
                if (jsonValue != null) 
                {
                    JSONArray jsonArray = jsonValue.isArray();
                    if (jsonArray != null) 
                    {
                        models = new ArrayList<$modelParameterizedType>();
                        models = readList(jsonArray);
                    }
                }
            }
        }
        return models;
    }
    
    public List<$modelParameterizedType> readList(JSONObject jsonObject) 
    {
        List<$modelParameterizedType> models = null;
        if (jsonObject != null) 
        {
            Set<String> keys = jsonObject.keySet();
            if (keys != null && !keys.isEmpty()) 
            {
                String arrayKey = keys.iterator().next();
                JSONValue jsonValue = jsonObject.get(arrayKey);
                if (jsonValue != null) 
                {
                    JSONArray jsonArray = jsonValue.isArray();
                    if (jsonArray != null) 
                    {
                        models = new ArrayList<$modelParameterizedType>();
                        models = readList(jsonArray);
                    }
                }
            }
        }
        return models;
    }
    
    public List<$modelParameterizedType> readList(JSONObject jsonObject, String arrayKey) 
    {
        List<$modelParameterizedType> models = null;
        if (jsonObject != null && arrayKey != null)
        {
            JSONValue jsonValue = jsonObject.get(arrayKey);
            if (jsonValue != null) 
            {
                JSONArray jsonArray = jsonValue.isArray();
                if (jsonArray != null) 
                {
                    models = new ArrayList<$modelParameterizedType>();
                    models = readList(jsonArray);
                }
            }
        }
        return models;
    }


    public List<$modelParameterizedType> readList(JSONArray jsonArray)
    {
        List<$modelParameterizedType> models = null;
        List<InstanceContextHolder<$modelParameterizedType, JSONObject>> instanceContextHolders = null;
        
        if (jsonArray != null) 
        {
            models = new ArrayList<$modelParameterizedType>();
            instanceContextHolders = new ArrayList<InstanceContextHolder<$modelParameterizedType, JSONObject>>();

            if (logger.isLoggable(FINE)) 
            {
                logger.log(FINE, "First iteration over JSON array to create models and process IDs");
            }
            int size = jsonArray.size();
            for (int i = 0; i < size; i++) 
            {
                JSONValue currentJsonValue = jsonArray.get(i);
                if (currentJsonValue != null) 
                {
                    JSONObject currentJsonObject = currentJsonValue.isObject();
                    if (currentJsonObject != null) 
                    {
                        $modelParameterizedType model = readId(currentJsonObject);
                        if (model != null) 
                        {
                            models.add(model);
                            instanceContextHolders.add(
                                new InstanceContextHolder<$modelParameterizedType, JSONObject>(model, currentJsonObject));
                        }
                    }
                }
            }
            
            if (logger.isLoggable(FINE)) 
            {
                logger.log(FINE, "Second iteration over generated models to map properties and IDREFs");
            }
            for (InstanceContextHolder<$modelParameterizedType, JSONObject> ich : instanceContextHolders) 
            {
                $modelParameterizedType model = ich.getInstance();
                readProperties(ich.getContext(), model);
                readIdRefs(ich.getContext(), model);
                ModelReadEvent.fire(this, model);
            }
        }
        return models;
    }


    // ---------------------------------------------------- read single methods

    public $modelParameterizedType read(String jsonString) 
    {
        $modelParameterizedType model = null;
        if (jsonString != null && jsonString.trim().length() != 0) 
        {
            JSONObject jsonObject = JSONParser.parseStrict(jsonString).isObject();
            if (jsonObject != null) 
            {
                model = internalRead(jsonObject);
            }
        }
        return model;
    }
    
    public $modelParameterizedType read(JSONObject jsonObject) 
    {
        $modelParameterizedType model = null;
        if (jsonObject != null) 
        {
            model = internalRead(jsonObject);
        }
        return model;
    }
    
    
    private $modelParameterizedType internalRead(JSONObject jsonObject) 
    {
        if (jsonObject == null) 
        {
            return null;
        }
        $modelParameterizedType model = readId(jsonObject);
        readProperties(jsonObject, model);
        readIdRefs(jsonObject, model);
        ModelReadEvent.fire(this, model);
        return model;
    }
    
    
    // ----------------------------------------- ids, properties and references

    public $modelParameterizedType idRef(String id) 
    {
        return this.idMap.get(id);
    }

    private $modelParameterizedType readId(JSONObject jsonObject)
    {
        ##TODO: Handle Id annotations
        $modelParameterizedType model = null;
        #if ($typeContext.instanceCreator)
            $typeContext.instanceCreator.name instanceCreator = GWT.create(${typeContext.instanceCreator.name}.class);
            model = instanceCreator.newInstance(jsonObject);
        #else
            model = GWT.create(${modelType}.class); 
        #end
        return model;
    }
    
    private $modelParameterizedType readProperties(JSONObject jsonObject, $modelParameterizedType model) 
    {
        if (jsonObject != null) 
        {
            #foreach ($property in $typeContext.properties)
                #parse($property.template)
            #end
        }
        return model;
    }
    
    private $modelParameterizedType readIdRefs(JSONObject jsonObject, $modelParameterizedType model) 
    {
        if (jsonObject != null) 
        {
            ## TODO: handleIdRefs(writer);
        }
        return model;
    }
}