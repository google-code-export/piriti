## Logs info when a property mapping starts
#macro(logProperty)
if (logger.isLoggable(FINE)) 
{
    logger.log(FINE, "Processing $property");
}
#end


#macro(newConcreteTypes)
	#foreach ($concreteType in $property.concreteTypes)
	    // if there are any reader / writer definitions in $concreteType.parameterizedQualifiedSourceName, this ensures they are registered
	    ${concreteType.parameterizedQualifiedSourceName}.class.getName();
	#end
#end


## Creates the custom converter
#macro(customConverter)
    $converter = GWT.create(${property.converter.name}.class);
    #if ($property.format) ${converter}.setFormat("$property.format"); #end
#end


## Tries to get the default converter from the converter registry 
#macro(defaultConverter $pType)
    #if ($property.format)
        $converter = converterRegistry.get(${pType}.class, "$property.format");
        if ($converter == null)
        {
            // No converter with the specified format found in the
            // registry --> Use the default one, set the format and
            // register it against the registry
            $converter = converterRegistry.get(${pType}.class);
            if ($converter != null)
            {
                ${converter}.setFormat("$property.format");
                converterRegistry.register(${pType}.class, ${converter}, "$property.format");
            }
            else
            {
                if (logger.isLoggable(SEVERE)) 
                {
                    logger.log(SEVERE, "No converter found for property $property.name with type $pType in ${modelType}.");
                }
            }
        }
    #else
        $converter = converterRegistry.get(${pType}.class);
    #end
#end


## Macro which combines the two converter macros from above to convert the input to the value
#macro(convert $pString)
    Converter<$parameterizedValueType> $converter = null;
    #if ($property.converter) #customConverter() #else #defaultConverter($parameterizedValueType) #end
    if ($converter != null)
    {
        $value = ${converter}.convert($pString);
    }
#end


## Macro which combines the two converter macros from above to serialize the value into a string
#macro(serialize) 
    Converter<$parameterizedValueType> $converter = null;
    #if ($property.converter) #customConverter() #else #defaultConverter($parameterizedValueType) #end
    if ($converter != null)
    {
        $valueAsString = ${converter}.serialize($value);
    }
#end


## Tries to parse the numeric value
#macro(valueOfNumeric $pDouble $pValue $pType)
    #if($TypeUtils.isByte($pType))
        $pValue = ${pDouble}.byteValue();
    #elseif($TypeUtils.isShort($pType))
        $pValue = ${pDouble}.shortValue();
    #elseif($TypeUtils.isInteger($pType))
        $pValue = ${pDouble}.intValue();
    #elseif($TypeUtils.isLong($pType))
        $pValue = ${pDouble}.longValue();
    #elseif($TypeUtils.isFloat($pType))
        $pValue = ${pDouble}.floatValue();
    #elseif($TypeUtils.isDouble($pType))
        $pValue = ${pDouble};
    #else
        if (logger.isLoggable(SEVERE)) 
        {
            logger.log(SEVERE, "$pType is no valid numeric type.");
        }
    #end
#end


## Tries to parse the enum with Enum.valueOf(String)
#macro(valueOfEnum $pString $pValue $pType)
    boolean error = true;
    String[] stringValues = new String[]{$pString, ${pString}.toUpperCase(), ${pString}.toLowerCase()};
    for (String s : stringValues)
    {
        try 
        {
            $pValue = ${pType}.valueOf(s);
            error = false;
            break;
        }
        catch (IllegalArgumentException e) {} 
    }
    if (error)
    {
        if (logger.isLoggable(SEVERE)) 
        {
            logger.log(SEVERE, "Cannot convert any of " + stringValues + " to enum using ${pType}.valueOf(String).");
        }
    }
#end


## Gets or selects the json value
#macro(getOrSelectJsonValue)
    #if ($property.jsonPath)
        $jsonValue = JsonPath.select(jsonObject, "$property.pathOrName");
    #else
        $jsonValue = jsonObject.get("$property.pathOrName");
    #end
#end


## Assigns the mapped value to the model property 
#macro(assignValue)
    #if ($property.setter)
        $property.setter.name setter = GWT.create(${property.setter.name}.class);
        setter.set(model, $value);
    #else
        #if ($property.accessibleField) 
            model.$property.name = $value;
        #elseif ($property.callableSetter)
            model.${property.callableSetterName}($value);
        #else
            if (logger.isLoggable(SEVERE)) 
            {
                logger.log(SEVERE, "No accessible field or setter found for property $property.name in ${modelType}.");
            }
        #end
    #end
#end


## Reads the value from the model property
#macro(readValue)
    #if ($property.getter)
        $property.getter.name getter = GWT.create(${property.getter.name}.class);
        $value = getter.get(model);
    #else
        #if ($property.accessibleField) 
            $value = model.$property.name;
        #elseif ($property.callableGetter) 
            $value = model.${property.callableGetterName}(); 
        #else
            if (logger.isLoggable(SEVERE)) 
            {
                logger.log(SEVERE, "No accessible field or getter found for property $property.name in ${modelType}.");
            }
        #end
    #end
#end