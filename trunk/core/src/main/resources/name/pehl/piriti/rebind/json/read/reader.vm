package ${typeContext.rwType.package.name};

import static java.util.logging.Level.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;

import com.google.gwt.core.client.GWT;
import com.google.gwt.core.client.JsonUtils;
import com.google.gwt.event.shared.GwtEvent;
import com.google.gwt.event.shared.HandlerManager;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.json.client.*;

import name.pehl.totoe.commons.client.*;
import name.pehl.totoe.json.client.*;

import name.pehl.piriti.commons.client.InstanceContextHolder;
import name.pehl.piriti.commons.client.*;
import name.pehl.piriti.converter.client.*;
import name.pehl.piriti.json.client.*;

#set( $qn = $typeContext.type.qualifiedSourceName)
#set( $pqn = $typeContext.type.parameterizedQualifiedSourceName)

public class $classname implements $typeContext.rwType.qualifiedSourceName 
{
    // --------------------------------------------------------- private fields
    
    private static Logger logger = Logger.getLogger("$typeContext.rwType.qualifiedSourceName");
    
    private final HandlerManager handlerManager;
    private final ConverterRegistry converterRegistry;
    private final JsonRegistry jsonRegistry;
    private final Map<String, $qn> idMap;
    


    // ----------------------------------------------------------- constructors

    public $classname() 
    {
	    this.handlerManager = new HandlerManager(this);
	    this.converterRegistry = ConverterGinjector.INJECTOR.getConverterRegistry();
	    this.jsonRegistry = JsonGinjector.INJECTOR.getJsonRegistry();
	    this.jsonRegistry.register($qn.class, this);
	    this.idMap = new HashMap<String, $qn>();
    }
    
    
    
    // --------------------------------------------------------- event handling
    
    public HandlerRegistration addModelReadHandler(ModelReadHandler<$pqn> handler) 
    {
        return handlerManager.addHandler(ModelReadEvent.getType(), handler);
    }

    public void fireEvent(GwtEvent<?> event) 
    {
        handlerManager.fireEvent(event);
    }

    
    
    // ------------------------------------------------------ read list methods

    public List<$pqn> readList(String jsonString)
    {
        List<$pqn> models = null;
        if (jsonString != null && jsonString.trim().length() != 0)
        {
            JSONObject jsonObject = JSONParser.parseStrict(jsonString).isObject();
            if (jsonObject != null)
            {
                Set<String> keys = jsonObject.keySet();
                if (keys != null && !keys.isEmpty())
                {
                    String arrayKey = keys.iterator().next();
                    JSONValue jsonValue = jsonObject.get(arrayKey);
                    if (jsonValue != null)
                    {
                        JSONArray jsonArray = jsonValue.isArray();
                        if (jsonArray != null)
                        {
                            models = new ArrayList<$pqn>();
                            models = readList(jsonArray);
                        }
                    }
                }
            }
        }
        return models;
    }
    
    public List<$pqn> readList(String jsonString, String arrayKey)
    {
        List<$pqn> models = null;
        if (jsonString != null && jsonString.trim().length() != 0 && arrayKey != null)
        {
            JSONObject jsonObject = JSONParser.parseStrict(jsonString).isObject();
            if (jsonObject != null) {
            {
                JSONValue jsonValue = jsonObject.get(arrayKey);
                if (jsonValue != null) 
                {
                    JSONArray jsonArray = jsonValue.isArray();
                    if (jsonArray != null) 
                    {
	                    models = new ArrayList<$pqn>();
	                    models = readList(jsonArray);
                    }
                }
            }
        }
        return models;
    }
    
    public List<$pqn> readList(JSONObject jsonObject) 
    {
        List<$pqn> models = null;
        if (jsonObject != null) 
        {
            Set<String> keys = jsonObject.keySet();
            if (keys != null && !keys.isEmpty()) 
            {
                String arrayKey = keys.iterator().next();
                JSONValue jsonValue = jsonObject.get(arrayKey);
                if (jsonValue != null) 
                {
                    JSONArray jsonArray = jsonValue.isArray();
                    if (jsonArray != null) 
                    {
                        models = new ArrayList<$pqn>();
                        models = readList(jsonArray);
                    }
                }
            }
        }
        return models;
    }
    
    public List<$pqn> readList(JSONObject jsonObject, String arrayKey) 
    {
        List<$pqn> models = null;
        if (jsonObject != null && arrayKey != null)
        {
            JSONValue jsonValue = jsonObject.get(arrayKey);
            if (jsonValue != null) 
            {
                JSONArray jsonArray = jsonValue.isArray();
                if (jsonArray != null) 
                {
                    models = new ArrayList<$pqn>();
                    models = readList(jsonArray);
                }
            }
        }
        return models;
    }


    public List<$pqn> readList(JSONArray jsonArray)
    {
        List<$pqn> models = null;
        List<InstanceContextHolder<$pqn, JSONObject>> instanceContextHolders = null;
        
        if (jsonArray != null) 
        {
            models = new ArrayList<$pqn>();
            instanceContextHolders = new ArrayList<InstanceContextHolder<$pqn, JSONObject>>();

            if (logger.isLoggable(FINE)) 
            {
                logger.log(FINE, "First iteration over JSON array to create models and process IDs");
            }
            int size = jsonArray.size();
            for (int i = 0; i < size; i++) 
            {
                JSONValue currentJsonValue = jsonArray.get(i);
                if (currentJsonValue != null) 
                {
                    JSONObject currentJsonObject = currentJsonValue.isObject();
                    if (currentJsonObject != null) 
                    {
                        $pqn model = readIds(currentJsonObject);
                        if (model != null) 
                        {
                            models.add(model);
                            instanceContextHolders.add(
                                new InstanceContextHolder<$pqn, JSONObject>(model, currentJsonObject));
                        }
                    }
                }
            }
            
            if (logger.isLoggable(FINE)) 
            {
                logger.log(FINE, "Second iteration over generated models to map properties and IDREFs");
            }
            for (InstanceContextHolder<$pqn, JSONObject> ich : instanceContextHolders) 
            {
                $pqn model = ich.getInstance();
                readProperties(ich.getContext(), model);
                readIdRefs(ich.getContext(), model);
                ModelReadEvent.fire(this, model);
            }
        }
        return models;
    }



    // ---------------------------------------------------- read single methods

    public $pqn read(String jsonString) 
    {
        $pqn model = null;
        if (jsonString != null && jsonString.trim().length() != 0) 
        {
            JSONObject jsonObject = JSONParser.parseStrict(jsonString).isObject();
            if (jsonObject != null) 
            {
                model = internalRead(jsonObject);
            }
        }
        return model;
    }
    
    public $pqn read(JSONObject jsonObject) 
    {
        $pqn model = null;
        if (jsonObject != null) 
        {
            model = internalRead(jsonObject);
        }
        return model;
    }
    
    
    private $pqn internalRead(JSONObject jsonObject) 
    {
        if (jsonObject == null) 
        {
            return null;
        }
        $pqn model = readIds(jsonObject);
        readProperties(jsonObject, model);
        readIdRefs(jsonObject, model);
        ModelReadEvent.fire(this, model);
        return model;
    }
    
    
    
    // ----------------------------------------- ids, properties and references

    private $pqn readIds(JSONObject jsonObject)
    {
        if (jsonObject != null) 
        {
            ##TODO
        }
        return null;
    }
    
    private $pqn readProperties(JSONObject jsonObject, $pqn model) 
    {
        if (jsonObject != null) 
        {
            #foreach( $entry in $properties.entrySet() )
                #set( $propertyContext = $entry.key )
                #set( $propertyHandler = $entry.value )
		        propertyHandler.log(writer, propertyContext);
		        propertyHandler.declare(writer, propertyContext);
		        propertyHandler.readInput(writer, propertyContext, propertyHandlerLookup);
		        propertyHandler.assign(writer, propertyContext);
            #end
        }
        return model;
    }
    
    private $pqn readIdRefs(JSONObject jsonObject, $pqn model) 
    {
        if (jsonObject != null) 
        {
            ## TODO: handleIdRefs(writer);
        }
        return model;
    }
}