#set($valueType = $propertyContext.type.qualifiedSourceName)
#set($value = $propertyContext.variableNames.valueVariable)
#set($collectionImplementation = $TypeUtils.collectionImplementationFor($valueType))
#set($componentType = $propertyContext.type.isParameterized().typeArgs[0].parameterizedQualifiedSourceName)
#set($jsonValue = $propertyContext.variableNames.newVariableName("JsonValue"))
#set($converter = $propertyContext.variableNames.newVariableName("Converter"))

$valueType $value = null;
JSONValue $jsonValue = null;

#getOrSelectJsonValue()
if ($jsonValue != null)
{
    JSONArray jsonArray = ${jsonValue}.isArray();
    if (jsonArray != null)
    {
        int size = jsonArray.size();
        $value = new $collectionImplementation<$componentType>();
        Converter<String> $converter = null;
        #if ($propertyContext.hasConverter()) #customConverter() #else #defaultConverter() #end
        for (int i = 0; i < size; i++)
        {
            JSONValue nestedJsonValue = jsonArray.get(i);
            if (nestedJsonValue != null && nestedJsonValue.isNull() == null) 
            {
                ## TODO: 
                ## 1. Build nested PropertyContext
                ## 2. Find related PropertyHandler
                ## 3. Render relevant template 
            }
        }
    }
    if ($value != null) 
    {
        #assignValue()
    }
}
