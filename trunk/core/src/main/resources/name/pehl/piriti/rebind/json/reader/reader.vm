#set($modelType = $typeContext.type.qualifiedSourceName)
#set($modelParameterizedType = $typeContext.type.parameterizedQualifiedSourceName)

package ${typeContext.rwType.package.name};

import static java.util.logging.Level.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gwt.core.client.GWT;

import name.pehl.piriti.commons.client.InstanceContextHolder;
import name.pehl.piriti.json.client.AbstractJsonReader;
import name.pehl.piriti.json.client.JsonReader;
import name.pehl.totoe.json.client.JsonPath;

import com.google.gwt.json.client.JSONArray;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.json.client.JSONString;
import com.google.gwt.json.client.JSONValue;

public class $implName extends AbstractJsonReader<$modelParameterizedType> implements $typeContext.rwType.qualifiedSourceName 
{
    // ----------------------------------------------------------- constructors

    public $implName() 
    {
        this.jsonRegistry.register(${modelType}.class, this);
    }
    
    
    // ------------------------------------------------------------ new methods
    
    protected $modelParameterizedType newModel()
    {
        $modelParameterizedType model = null;
        #if ($typeContext.instanceCreator)
            $typeContext.instanceCreator.qualifiedSourceName instanceCreator = GWT.create(${typeContext.instanceCreator.qualifiedSourceName}.class);
            model = instanceCreator.newInstance(jsonObject);
        #else
            model = GWT.create(${modelType}.class); 
        #end
        return model;
    }

    // -------------------------------------------------------- read properties
    
    protected $modelParameterizedType readProperties(JSONObject jsonObject, $modelParameterizedType model) 
    {
        if (jsonObject != null) 
        {
            #foreach ($property in $typeContext.properties)
				#set($valueType = $property.type.qualifiedSourceName)
				#set($parameterizedValueType = $property.type.parameterizedQualifiedSourceName)
				#set($value = $property.variables.value)
                #set($jsonValue = $property.variables.newVariable("JsonValue"))
				#set($converter = $property.variables.newVariable("Converter"))
				
                // parsing template $property.template
				if (logger.isLoggable(FINE)) 
				{
				    logger.log(FINE, "Processing $parameterizedValueType $property.name");
				}
				$parameterizedValueType $value = null;
			    #if ($property.jsonPath)
			        JSONValue $jsonValue = JsonPath.select(jsonObject, "$property.pathOrName");
			    #else
			        JSONValue $jsonValue = jsonObject.get("$property.pathOrName");
			    #end
			    if ($jsonValue != null)
                {
                    ## Here happens the actual reading / conversion from $jsonValue to $value
                    #parse($property.template)
				    if ($value != null) 
				    {
					    #if ($property.setter)
					        $property.setter setter = GWT.create(${property.setter}.class);
					        setter.set(model, $value);
					    #else
					        #if ($property.accessibleField) 
					            model.$property.name = $value;
					        #elseif ($property.callableSetter)
					            model.${property.callableSetterName}($value);
					        #else
					            if (logger.isLoggable(SEVERE)) 
					            {
					                logger.log(SEVERE, "No accessible field or setter found for property $property.name in ${modelType}.");
					            }
					        #end
					    #end
				    }
			    }
            #end
        }
        return model;
    }
}